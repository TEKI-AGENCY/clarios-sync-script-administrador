generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model addresses {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name         String    @db.VarChar(255)
  phone        String?   @db.VarChar(255)
  address      String    @db.VarChar(255)
  cellphone    String?   @db.VarChar(255)
  contact      String?   @db.VarChar(255)
  neighborhood String?   @db.VarChar(255)
  city         String    @db.VarChar(255)
  country      String?   @default("Colombia") @db.VarChar(255)
  delivery     String?   @db.VarChar(255)
  email        String?   @db.VarChar(255)
  latitude     String?   @db.VarChar(255)
  longitude    String?   @db.VarChar(255)
  type         String?   @db.VarChar(255)
  brand        String    @db.VarChar(255)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model catalog_mac_vehicle {
  catalog_id     BigInt    @db.UnsignedBigInt
  mac_vehicle_id BigInt    @db.UnsignedBigInt
  priority       Int
  recommended    Boolean
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@id([catalog_id, mac_vehicle_id])
}

model catalog_vehicle {
  catalog_id  BigInt    @db.UnsignedBigInt
  vehicle_id  BigInt    @db.UnsignedBigInt
  priority    Int
  recommended Boolean   @default(false)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@id([catalog_id, vehicle_id])
}

model catalogs {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  brand       String    @db.VarChar(255)
  serie       String    @db.VarChar(255)
  reference   String    @db.VarChar(255)
  e_reference String?   @db.VarChar(255)
  description String?   @db.Text
  polarity    String    @db.VarChar(255)
  cca         String    @db.VarChar(255)
  length      Int
  width       Int
  height      Int
  warranty    String    @db.VarChar(255)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  images      images[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model images {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  path       String    @db.VarChar(255)
  name       String    @db.VarChar(255)
  side       String?   @db.VarChar(255)
  catalog_id BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  catalogs   catalogs  @relation(fields: [catalog_id], references: [id], onUpdate: Restrict, map: "images_catalog_id_foreign")

  @@index([catalog_id], map: "images_catalog_id_foreign")
}

model mac_vehicles {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  brand      String    @db.VarChar(255)
  type       String    @db.VarChar(255)
  makes      String    @db.VarChar(255)
  model      String    @db.VarChar(255)
  bodywork   String?   @db.VarChar(255)
  cylinder   String?   @db.VarChar(255)
  gas_type   String?   @db.VarChar(255)
  technology String?   @db.VarChar(255)
  polarity   String?   @db.VarChar(255)
  version    String?   @db.VarChar(255)
  year       String?   @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model mac_vehicles_old {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  brand      String    @db.VarChar(255)
  type       String    @db.VarChar(255)
  makes      String    @db.VarChar(255)
  model      String    @db.VarChar(255)
  bodywork   String?   @db.VarChar(255)
  cylinder   String?   @db.VarChar(255)
  gas_type   String?   @db.VarChar(255)
  technology String?   @db.VarChar(255)
  polarity   String?   @db.VarChar(255)
  version    String?   @db.VarChar(255)
  year       String?   @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model oauth_access_tokens {
  id         String    @id @db.VarChar(100)
  user_id    BigInt?   @db.UnsignedBigInt
  client_id  BigInt    @db.UnsignedBigInt
  name       String?   @db.VarChar(255)
  scopes     String?   @db.Text
  revoked    Boolean
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  expires_at DateTime? @db.DateTime(0)

  @@index([user_id], map: "oauth_access_tokens_user_id_index")
}

model oauth_auth_codes {
  id         String    @id @db.VarChar(100)
  user_id    BigInt    @db.UnsignedBigInt
  client_id  BigInt    @db.UnsignedBigInt
  scopes     String?   @db.Text
  revoked    Boolean
  expires_at DateTime? @db.DateTime(0)

  @@index([user_id], map: "oauth_auth_codes_user_id_index")
}

model oauth_clients {
  id                     BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                BigInt?   @db.UnsignedBigInt
  name                   String    @db.VarChar(255)
  secret                 String?   @db.VarChar(100)
  provider               String?   @db.VarChar(255)
  redirect               String    @db.Text
  personal_access_client Boolean
  password_client        Boolean
  revoked                Boolean
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)

  @@index([user_id], map: "oauth_clients_user_id_index")
}

model oauth_personal_access_clients {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  client_id  BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model oauth_refresh_tokens {
  id              String    @id @db.VarChar(100)
  access_token_id String    @db.VarChar(100)
  revoked         Boolean
  expires_at      DateTime? @db.DateTime(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model search_errors {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  brand      String?   @db.VarChar(10)
  type       String    @default("No encontrado") @db.VarChar(255)
  plate      String    @db.VarChar(255)
  document   String?   @db.VarChar(255)
  makes      String    @db.VarChar(255)
  model      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  api_data   Json?
}

model tokens {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  token      String    @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  role              String    @default("admin") @db.VarChar(255)
}

model vehicles {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  brand      String    @db.VarChar(255)
  type       String    @db.VarChar(255)
  makes      String    @db.VarChar(255)
  model      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}
